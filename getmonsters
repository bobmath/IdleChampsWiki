#!/usr/bin/env perl
use utf8;
use strict;
use warnings;
use JSON ();
use Storable qw( dclone );

my $json = JSON->new();
#$json->boolean_values(0, 1);
$json->indent(1);
$json->canonical(1);

my $monsters = load_defines('monster_defines');
my $static_monsters = load_json('defines/monster_defines/static') || {};
my ($attacks, $graphics) = load_other();

my @properties = qw(
   dies_at_formation
);

my @modifiers = qw(
   gold_modifier
   speed_modifier
);

{
   my %monst_names;
   foreach my $id (sort { $a <=> $b } keys %$monsters) {
      my $monst = $monsters->{$id};
      my $name = $monst->{_name} // $monst->{name};
      push @{$monst_names{$name}}, $monst;
   }

   mkdir 'monsters';
   foreach my $name (sort keys %monst_names) {
      print "$name\n";
      (my $file = $name) =~ s/\s+/_/g;
      open my $OUT, '>:utf8', "monsters/$file" or die;
      my %cats;
      print $OUT qq[<ul class="hlist">\n];

      foreach my $monst (@{$monst_names{$name}}) {
         if (my $static = $static_monsters->{$monst->{id}}) {
            foreach my $stat (@$static) {
               my $mcopy = dclone($monst);
               while (my ($key, $val) = each %$stat) {
                  if (ref $val) {
                     my $targ = $mcopy->{$key} ||= {};
                     while (my ($k, $v) = each %$val) {
                        $targ->{$k} = $v;
                     }
                  }
                  else {
                     $mcopy->{$key} = $val;
                  }
               }
               show_monster($OUT, $mcopy, \%cats);
            }
         }
         else {
            show_monster($OUT, $monst, \%cats);
         }
      }

      print $OUT "</ul>\n";
      print $OUT "[[Category:$_]]\n" foreach sort keys %cats;
      close $OUT;
   }

   system 'diff -ur oldmonsters monsters' if -d 'oldmonsters';
}

sub show_monster {
   my ($OUT, $monst, $cats) = @_;
   print $OUT "<li>\n{{Monster\n| monster_id = $monst->{id}\n";
   if (my $grname = $graphics->{$monst->{graphic_id}}) {
      my $shortname = $grname;
      $shortname =~ s/^.*_(?=[[:alpha:]])//;
      $shortname =~ s/([[:lower:]])_?([[:upper:]]|\d)/$1 $2/g;
      print $OUT "| name = \u$shortname\n";
      print $OUT "| imgname = $grname.png\n";
   }

   show_attacks($OUT, $monst, $cats);
   show_health($OUT, $monst, $cats);

   if (my $tags = $monst->{tags}) {
      my $n = 0;
      foreach my $tag (sort @$tags) {
         next if $tag eq 'hits_based' || $tag eq 'armor_based';
         (my $uc = $tag) =~ s/\b(\w)/\u$1/g;
         $n++;
         print $OUT "| tags$n = $uc\n";
         $cats->{$uc} = 1;
      }
   }

   if (my $props = $monst->{properties}) {
      if (my $eff = $props->{effect_when_hit}) {
         $eff = effect_desc($eff, $monst);
         print $OUT "| effect = $eff when hit\n";
      }
      my %props;
      foreach my $p (@properties) {
         $props{$p} = 1 if $props->{$p};
      }
      $props{stun_immune} = 1 unless $props->{allow_stun} // 1;
      $props{impassable} = 1 unless $props->{passable} // 1;
      foreach my $p (sort keys %props) {
         print $OUT "| $p = true\n";
         my $uc = ucfirst($p);
         $uc =~ s/_/ /g;
         $cats->{$uc} = 1;
      }
      show_spawn($OUT, $props);
   }

   foreach my $mod (@modifiers) {
      my $val = $monst->{$mod};
      next unless defined($val);
      print $OUT "| $mod = $val\n";
   }

   print $OUT "}}\n</li>\n";
}

sub show_spawn {
   my ($OUT, $props) = @_;
   if (my $spawn = $props->{spawns_monster_ids}) {
      my %spawn;
      foreach my $id (@$spawn) {
         my $monst = $monsters->{$id} or die;
         my $name = $monst->{_name} || $monst->{name};
         $spawn{$name}++;
      }
      if (%spawn) {
      print $OUT "| spawn = ",
         join(", ", map "[[$_]]", sort keys %spawn), "\n";
      }
   }

   my $spawn = $props->{spawns_monster_on_death} or return;
   my @ids;
   if (my $id = $spawn->{monster_id}) { push @ids,  $id }
   if (my $ids = $spawn->{monster_ids}) { push @ids,  @$ids }
   my %spawn;
   foreach my $id (@ids) {
      my $monst = $monsters->{$id} or die;
      my $name = $monst->{_name} || $monst->{name};
      $spawn{$name}++;
   }
   my @spawn;
   foreach my $name (sort keys %spawn) {
      my $count = $spawn{$name};
      $name = "[[$name]]";
      $name .= " ×$count" if $count > 1;
      push @spawn, $name;
   }
   print $OUT "| spawn_on_death = @spawn\n" if @spawn;
}

sub load_defines {
   my ($name) = @_;
   opendir my $DIR, "defines/$name" or die;
   my $data = {};
   local $/ = undef;
   foreach my $file (readdir $DIR) {
      next if $file =~ /\D/;
      open my $IN, '<:utf8', "defines/$name/$file" or die;
      $data->{$file} = $json->decode(<$IN>);
      close $IN;
   }
   closedir $DIR;
   return $data;
}

sub show_attacks {
   my ($OUT, $monst, $cats) = @_;
   my @attacks = ( $monst->{attack_id} );
   if (my $more = $monst->{properties}{more_attacks}) {
      foreach my $att (@$more) {
         push @attacks, $att->{attack_id};
      }
   }

   my $n = 0;
   my %seen;
   while (@attacks) {
      my $id = shift @attacks or next;
      next if $seen{$id};
      $seen{$id} = 1;
      my $att = $attacks->{$id} or die;
      my $desc = attack_desc($att, $monst, $cats);
      $n++;
      print $OUT "| attack_$n = $desc\n";
      foreach my $anim (@{$att->{animations}}) {
         push @attacks, $anim->{chain_attack_id},
            $anim->{update_base_attack_after};
      }
   }
}

sub attack_desc {
   my ($att, $monst, $cats) = @_;
   my @props;
   my $mprops = $monst->{properties} || {};

   if (my $types = $att->{damage_types}) {
      push @props, @$types;
   }

   my $targ = $att->{target} || '';
   if ($targ ne 'front') {
      $targ =~ s/^formation_slots,/slots /;
      $targ =~ s/_/ /g;
      push @props, "target $targ";
   }

   if ($mprops->{insta_kill}) {
      push @props, 'insta-kill';
      $cats->{'Insta kill'} = 1;
   }
   else {
      my $dmg = ($att->{damage_modifier} // 1)
         * ($monst->{damage_modifier} // 1);
      push @props, "damage ×$dmg" unless $dmg == 1;
   }

   my $num_attacks;
   if (my $anims = $att->{animations}) {
      foreach my $anim (@$anims) {
         if (my $num = $anim->{projectile_count} || $anim->{chain_targets}) {
            $num_attacks = $num;
         }
         if (my $min = $anim->{min_damage_percent}) {
            push @props, "min dmg $min% hero health";
         }
         if (my $aoe = $anim->{aoe_targets}) {
            $aoe =~ s/_/ /g;
            push @props, "splash $aoe";
         }
         if (my $hits = $anim->{hit_frames}) {
            $num_attacks ||= @$hits;
         }
         if (my $frames = $anim->{effect_frames}) {
            foreach my $name (sort keys %$frames) {
               my $frame = $frames->{$name};
               push @props, effect_desc($frame, $monst);
            }
         }
      }
   }

   if (my $eff = $mprops->{effect_on_hit}) {
      push @props, effect_desc($eff, $monst);
   }

   $num_attacks ||= $att->{num_targets} || 1;
   push @props, "attacks $num_attacks" unless $num_attacks == 1;

   if ($mprops->{die_after_damage_hero}) {
      push @props, 'dies after attack';
      $cats->{'Die after damage hero'} = 1;
   }
   elsif (my $cd = $att->{cooldown}) {
      push @props, "cooldown ${cd}s";
   }

   my $name = $att->{name};
   $name .= ' (' . join(', ', @props) . ')' if @props;
   return $name;
}

sub effect_desc {
   my ($info, $monst) = @_;
   my $str;
   if (ref $info) {
      $str = $info->{effect_string};
   }
   else {
      $str = $info;
      $info = {};
   }
   return unless $str;
   if ($str =~ /^add_monster_health,(\d+),?(\d*)/) {
      return add_target("lifesteal $1", $2, $monst->{id});
   }
   elsif ($str =~ /^add_monster_health_percent,(\d+),?(\d*)/) {
      return add_target("lifesteal $1%", $2, $monst->{id});
   }
   elsif ($str =~ /^base_attack_speed_decrease,(\d+)/) {
      my $time = $info->{for_time} or die;
      return "slow $1% for ${time}s";
   }
   elsif ($str =~ /^disable_hero_properties,/) {
      my $time = $info->{for_time} or die;
      return "stun ${time}s";
   }
   elsif ($str =~ /^monster_damage_increase,(\d+)/) {
      return "increase monster damage $1%";
   }
   elsif ($str =~ /^effect_def,(\d+)/) {
      if ($1 == 43) {
         return "next hero attack slowed 75%";
      }
      elsif ($1 == 45) {
         return "hero dps reduced 90% for 5s";
      }
      elsif ($1 == 366) {
         return "stun 15s after 4 hits";
      }
      elsif ($1 == 368) {
         return "slow by 2s for 10s";
      }
      elsif ($1 == 485) {
         return "slow by 0.25s until next area";
      }
      else {
         return "effect $1";
      }
   }
   else {
      return "effect $str";
   }
}

sub add_target {
   my ($str, $id, $id2) = @_;
   if ($id && $id2 && $id != $id2) {
      my $targ = $monsters->{$id} or die;
      my $name = $targ->{name};
      $name = "$targ->{_name}|$name" if $targ->{_name};
      $str .= " to [[$name]]";
   }
   return $str;
}

sub show_health {
   my ($OUT, $monst, $cats) = @_;
   my $props = $monst->{properties} || {};
   my @health;
   my $health = $monst->{health_modifier} // 1;
   my $tag = '';

   if (my $ranges = $props->{first_health_ranges}) {
      foreach my $range (@$ranges) {
         my $type = $range->{type} or next;
         if ($type eq 'armor_based') {
            my $pts = $range->{armor_chunks} || 0;
            push @health, "×$pts armor [[File:Health_Shield.png|20px]]";
            $tag = ' health';
            $cats->{'Armor based damage'} = 1;
         }
         else {
            push @health, "first range $type";
         }
      }
   }

   if (ref $props->{indestructible}) {
      push @health, 'indestructible';
      $cats->{Indestructible} = 1;
   }
   elsif ($props->{hits_based_damage}) {
      push @health, "×$health hit-based";
      $cats->{'Hits based damage'} = 1;
   }
   elsif ($props->{armor_based_damage}) {
      push @health, "×$health armor-based [[File:Health_Shield.png|20px]]";
      $cats->{'Armor based damage'} = 1;
   }
   elsif (my $override = $props->{override_health}) {
      push @health, $override;
   }
   elsif ($health != 1 || $tag) {
      push @health, "×$health$tag";
   }

   if (my $start = $props->{starting_health_percent}) {
      push @health, "$start% starting health";
   }

   print $OUT "| health_modifier = ", join('<br>', @health), "\n" if @health;
}

sub load_json {
   my ($file) = @_;
   open my $IN, '<:utf8', $file or return;
   local $/ = undef;
   my $data = $json->decode(<$IN>);
   close $IN;
   return $data;
}

sub load_other {
   my ($name) = @_;
   open my $IN, '<:utf8', 'defines/defines.json' or die;
   local $/ = undef;
   my $defines = $json->decode(<$IN>);
   close $IN;

   my $attacks = {};
   foreach my $att (@{$defines->{attack_defines}}) {
      $attacks->{$att->{id}} = $att;
   }

   my $graphics = {};
   foreach my $gr (@{$defines->{graphic_defines}}) {
      my $name = $gr->{graphic} or next;
      $name =~ s{^.*/}{};
      $graphics->{$gr->{id}} = $name;
   }

   return ($attacks, $graphics);
}

